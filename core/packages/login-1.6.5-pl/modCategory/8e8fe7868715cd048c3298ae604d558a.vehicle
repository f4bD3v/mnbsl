<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '43c38fd86b0196aca4b8be78edf91fbf' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"name":"lgnLoginTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<div class=\\"loginForm\\">\\n    <div class=\\"loginMessage\\">[[+errors]]<\\/div>\\n    <div class=\\"loginLogin\\">\\n        <form class=\\"loginLoginForm\\" action=\\"[[~[[*id]]]]\\" method=\\"post\\">\\n            <fieldset class=\\"loginLoginFieldset\\">\\n                <legend class=\\"loginLegend\\">[[+actionMsg]]<\\/legend>\\n                <label class=\\"loginUsernameLabel\\">[[%login.username]]\\n                    <input class=\\"loginUsername\\" type=\\"text\\" name=\\"username\\" \\/>\\n                <\\/label>\\n                \\n                <label class=\\"loginPasswordLabel\\">[[%login.password]]\\n                    <input class=\\"loginPassword\\" type=\\"password\\" name=\\"password\\" \\/>\\n                <\\/label>\\n                <input class=\\"returnUrl\\" type=\\"hidden\\" name=\\"returnUrl\\" value=\\"[[+request_uri]]\\" \\/>\\n\\n                [[+login.recaptcha_html]]\\n                \\n                <input class=\\"loginLoginValue\\" type=\\"hidden\\" name=\\"service\\" value=\\"login\\" \\/>\\n                <span class=\\"loginLoginButton\\"><input type=\\"submit\\" name=\\"Login\\" value=\\"[[+actionMsg]]\\" \\/><\\/span>\\n            <\\/fieldset>\\n        <\\/form>\\n    <\\/div>\\n<\\/div>","locked":0,"properties":""}',
        'guid' => '33bb8e019940150991ecdecf0e76a3bd',
        'native_key' => 1,
        'signature' => '96bc133d7e6a4c05f7afcf9ca7ff247d',
      ),
      '0b5eaea2a561d49ec10a6c02c6496cf0' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"name":"lgnLogoutTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<div class=\\"loginMessage\\">[[+errors]]<\\/div>\\n<br \\/>\\n<div class=\\"loginLogin\\">\\n    <div class=\\"loginRegister\\">\\n        <a href=\\"[[+logoutUrl]]\\" title=\\"[[+actionMsg]]\\">[[+actionMsg]]<\\/a>\\n    <\\/div>\\n<\\/div>","locked":0,"properties":""}',
        'guid' => 'df14fdcfc2ca0c049479b36b942440b5',
        'native_key' => 2,
        'signature' => '9772a5ebea8f0305db4f61ffb6b5cdd4',
      ),
      '7d7b85b10798f4066dde60e2764d17b1' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":3,"name":"lgnErrTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<p class=\\"error\\">[[+msg]]<\\/p>","locked":0,"properties":""}',
        'guid' => '00c68b303050f67ee3ec1b4a15535d7f',
        'native_key' => 3,
        'signature' => '5671a70d7681e7291875b2beb5434b42',
      ),
      'a4998665a7a9fd8ac031a58717f4f765' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":4,"name":"lgnForgotPassEmail","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<p>[[+username]],<\\/p>\\n\\n<p>To activate your new password, please click on the following link:<\\/p>\\n\\n<p><a href=\\"[[+confirmUrl]]\\">[[+confirmUrl]]<\\/a><\\/p>\\n\\n<p>If successful you can use the following password to login:<\\/p>\\n\\n<p><strong>Password:<\\/strong> [[+password]]<\\/p>\\n\\n<p>If you did not request this message, please ignore it.<\\/p>\\n\\n<p>Thanks,<br \\/>\\n<em>Site Administrator<\\/em><\\/p>","locked":0,"properties":""}',
        'guid' => 'f6c12e6810455b9866c28dfb75b3b58c',
        'native_key' => 4,
        'signature' => '2f7170223e33d588608a2dee5b41379f',
      ),
      '50c47c083df7100aee377d28f8cd3010' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":5,"name":"lgnForgotPassSentTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<h2>Your Login Information Has Been Sent<\\/h2>\\n\\n<p>Your login information has been sent to the email address [[+email]].<\\/p>","locked":0,"properties":""}',
        'guid' => '90fe95620d6e781d14d2f8b002813f26',
        'native_key' => 5,
        'signature' => 'b20e8476b859ebdc4a52d9114c0dd83b',
      ),
      'a1f11c0f8f15d67655ccd0f70ff1635f' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":6,"name":"lgnForgotPassTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<div class=\\"loginFPErrors\\">[[+loginfp.errors]]<\\/div>\\n<div class=\\"loginFP\\">\\n    <form class=\\"loginFPForm\\" action=\\"[[~[[*id]]]]\\" method=\\"post\\">\\n        <fieldset class=\\"loginFPFieldset\\">\\n            <legend class=\\"loginFPLegend\\">[[%login.forgot_password]]<\\/legend>\\n            <label class=\\"loginFPUsernameLabel\\">[[%login.username]]\\n                <input class=\\"loginFPUsername\\" type=\\"text\\" name=\\"username\\" value=\\"[[+loginfp.post.username]]\\" \\/>\\n            <\\/label>\\n            \\n            <p>[[%login.or_forgot_username]]<\\/p>\\n            \\n            <label class=\\"loginFPEmailLabel\\">[[%login.email]]\\n                <input class=\\"loginFPEmail\\" type=\\"text\\" name=\\"email\\" value=\\"[[+loginfp.post.email]]\\" \\/>\\n            <\\/label>\\n            \\n            <input class=\\"returnUrl\\" type=\\"hidden\\" name=\\"returnUrl\\" value=\\"[[+loginfp.request_uri]]\\" \\/>\\n            \\n            <input class=\\"loginFPService\\" type=\\"hidden\\" name=\\"login_fp_service\\" value=\\"forgotpassword\\" \\/>\\n            <span class=\\"loginFPButton\\"><input type=\\"submit\\" name=\\"login_fp\\" value=\\"[[%login.reset_password]]\\" \\/><\\/span>\\n        <\\/fieldset>\\n    <\\/form>\\n<\\/div>","locked":0,"properties":""}',
        'guid' => '7f0d9404ef188fdf117a60526fae846f',
        'native_key' => 6,
        'signature' => 'd3a86ef5688fd3337fe4d0bceed3c09d',
      ),
      '804ab7935c16549a3cc4ffd006e9c1cf' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":7,"name":"lgnResetPassTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<div class=\\"loginResetPass\\">\\n<p class=\\"loginResetPassHeader\\">[[+username]],<\\/p>\\n\\n<p class=\\"loginResetPassText\\">Your password has been reset. Please return <a href=\\"[[+loginUrl]]\\">here<\\/a> to log in.<\\/p>  \\n<\\/div>","locked":0,"properties":""}',
        'guid' => 'e28f09396090e02db15c8d5b092347b9',
        'native_key' => 7,
        'signature' => 'd0427598fef4cecdf3432fdee1a4cc9d',
      ),
      'c95413115056773ca5ec971b36948770' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":8,"name":"lgnRegisterForm","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<div class=\\"register\\">\\n    <div class=\\"registerMessage\\">[[+error.message]]<\\/div>\\n    \\n    <form class=\\"form\\" action=\\"[[~[[*id]]]]\\" method=\\"post\\">\\n        <input type=\\"hidden\\" name=\\"nospam:blank\\" value=\\"\\" \\/>\\n        \\n        <label for=\\"username\\">[[%register.username? &namespace=`login` &topic=`register`]]\\n            <span class=\\"error\\">[[+error.username]]<\\/span>\\n        <\\/label>\\n        <input type=\\"text\\" name=\\"username:required:minLength=6\\" id=\\"username\\" value=\\"[[+username]]\\" \\/>\\n        \\n        <label for=\\"password\\">[[%register.password]]\\n            <span class=\\"error\\">[[+error.password]]<\\/span>\\n        <\\/label>\\n        <input type=\\"password\\" name=\\"password:required:minLength=6\\" id=\\"password\\" value=\\"[[+password]]\\" \\/>\\n        \\n        <label for=\\"password_confirm\\">[[%register.password_confirm]]\\n            <span class=\\"error\\">[[+error.password_confirm]]<\\/span>\\n        <\\/label>\\n        <input type=\\"password\\" name=\\"password_confirm:password_confirm=`password`\\" id=\\"password_confirm\\" value=\\"[[+password_confirm]]\\" \\/>\\n        \\n        <label for=\\"fullname\\">[[%register.fullname]]\\n            <span class=\\"error\\">[[+error.fullname]]<\\/span>\\n        <\\/label>\\n        <input type=\\"text\\" name=\\"fullname:required\\" id=\\"fullname\\" value=\\"[[+fullname]]\\" \\/>\\n        \\n        <label for=\\"email\\">[[%register.email]]\\n            <span class=\\"error\\">[[+error.email]]<\\/span>\\n        <\\/label>\\n        <input type=\\"text\\" name=\\"email:email\\" id=\\"email\\" value=\\"[[+email]]\\" \\/>\\n        \\n        <br class=\\"clear\\" \\/>\\n\\n        [[+register.recaptcha_html]]\\n        [[+error.recaptcha]]\\n        \\n        <div class=\\"form-buttons\\">\\n            <input type=\\"submit\\" name=\\"login-register-btn\\" value=\\"Register\\" \\/>\\n        <\\/div>\\n    <\\/form>\\n<\\/div>","locked":0,"properties":""}',
        'guid' => '3660910117b3d34f07cd345a2f5fe50a',
        'native_key' => 8,
        'signature' => '2412073d2f43fec1d708e4bad40b3afe',
      ),
      'ad6ee3abd7abc8103cc8b4db7cad145b' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":9,"name":"lgnActivateEmailTpl","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"<p>[[+username]],<\\/p>\\n\\n<p>Thanks for registering! To activate your new account, please click on the following link:<\\/p>\\n\\n<p><a href=\\"[[+confirmUrl]]\\">[[+confirmUrl]]<\\/a><\\/p>\\n\\n<p>After activating, you may login with your password and username:<\\/p>\\n\\n<p>\\nUsername: <strong>[[+username]]<\\/strong><br \\/>\\nPassword: <strong>[[+password]]<\\/strong><\\/p>\\n\\n<p>If you did not request this message, please ignore it.<\\/p>\\n\\n<p>Thanks,<br \\/>\\n<em>Site Administrator<\\/em><\\/p>","locked":0,"properties":""}',
        'guid' => '362bc5486707e7187fa588472462c144',
        'native_key' => 9,
        'signature' => '53843089e17fdaee0cbcef5271390abc',
      ),
    ),
    'Snippets' => 
    array (
      'de62841a2ca03b24a24ff727cddb4dc8' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"name":"Login","description":"Displays a login and logout form.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Login\\n *\\n * Copyright 2010 by Jason Coward <jason@modx.com> and Shaun McCormick\\n * <shaun@modx.com>\\n *\\n * Login is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * Login is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Login; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx Login Snippet\\n *\\n * This snippet handles login POSTs, sending the user back to where they came from or to a specific\\n * location if specified in the POST.\\n *\\n * @package login\\n *\\n * @property textfield actionKey The REQUEST variable containing the action to take.\\n * @property textfield loginKey The actionKey for login.\\n * @property textfield logoutKey The actionKey for logout.\\n * @property list tplType The type of template to expect for the views:\\n *  modChunk - name of chunk to use\\n *  file - full path to file to use as tpl\\n *  embedded - the tpl is embedded in the page content\\n *  inline - the tpl is inline content provided directly\\n * @property textfield loginTpl The template for the login view (content based on tplType)\\n * @property textfield logoutTpl The template for the logout view (content based on tplType)\\n * @property textfield errTpl The template for any errors that occur when processing an view\\n * @property list errTplType The type of template to expect for the error messages:\\n *  modChunk - name of chunk to use\\n *  file - full path to file to use as tpl\\n *  inline - the tpl is inline content provided directly\\n * @property integer logoutResourceId An explicit resource id to redirect users to on logout\\n * @property string loginMsg The string to use for the login action. Defaults to\\n * the lexicon string \\"login\\".\\n * @property string logoutMsg The string to use for the logout action. Defaults\\n * to the lexicon string \\"login.logout\\"\\n *\\/\\nrequire_once $modx->getOption(\'login.core_path\',null,$modx->getOption(\'core_path\').\'components\\/login\\/\').\'model\\/login\\/login.class.php\';\\n$login = new Login($modx,$scriptProperties);\\nif (!is_object($login) || !($login instanceof Login)) return \'\';\\n\\n$output = \'\';\\n$modx->lexicon->load(\'login:default\');\\n\\n\\/* setup default properties *\\/\\n$preHooks = $modx->getOption(\'preHooks\',$scriptProperties,\'\');\\n$loginTpl = $modx->getOption(\'loginTpl\',$scriptProperties,\'lgnLoginTpl\');\\n$logoutTpl = $modx->getOption(\'logoutTpl\',$scriptProperties,\'lgnLogoutTpl\');\\n$loginMsg = $modx->getOption(\'loginMsg\',$scriptProperties,\'\');\\n$logoutMsg = $modx->getOption(\'logoutMsg\',$scriptProperties,\'\');\\n$tplType = $modx->getOption(\'tplType\',$scriptProperties,\'modChunk\');\\n$actionKey = $modx->getOption(\'actionKey\',$scriptProperties,\'service\');\\n$loginKey = $modx->getOption(\'loginKey\',$scriptProperties,\'login\');\\n$logoutKey = $modx->getOption(\'logoutKey\',$scriptProperties,\'logout\');\\n$errorPrefix = $modx->getOption(\'errorPrefix\',$scriptProperties,\'error\');\\n$errTpl = $modx->getOption(\'errTpl\',$scriptProperties,\'lgnErrTpl\');\\n$errTplType = $modx->getOption(\'errTplType\',$scriptProperties,\'modChunk\');\\n$rememberMeKey = $modx->getOption(\'rememberMeKey\',$scriptProperties,\'rememberme\');\\n$loginContext = isset($_REQUEST[\'login_context\']) && !empty($_REQUEST[\'login_context\']) ? $_REQUEST[\'login_context\'] : $modx->context->get(\'key\');\\n$contexts = !empty($scriptProperties[\'contexts\']) ? $scriptProperties[\'contexts\'] : \'\';\\n$contexts = !empty($_REQUEST[\'add_contexts\']) ? $_REQUEST[\'add_contexts\'] : $contexts;\\n$authenticated = $modx->user->isAuthenticated($loginContext);\\n\\nif (isset($_REQUEST[$actionKey]) && !empty($_REQUEST[$actionKey])) {\\n    \\/* login *\\/\\n    if (!empty($_POST) && isset($_POST[$actionKey]) && !$authenticated) {\\n        if ($_POST[$actionKey] == $loginKey) {\\n            \\/* set default POST vars if not in form *\\/\\n            if (!isset($_POST[\'login_context\'])) $_POST[\'login_context\'] = $loginContext;\\n\\n            \\/* do pre-login hooks *\\/\\n            $fields = $_REQUEST;\\n            $login->loadHooks(\'loginPrehooks\');\\n            $login->loginPrehooks->loadMultiple($preHooks,$fields,array(\\n                \'mode\' => Login::MODE_LOGIN,\\n            ));\\n\\n            \\/* process prehooks *\\/\\n            if (!empty($login->loginPrehooks->errors)) {\\n                $modx->toPlaceholders($login->loginPrehooks->errors,$errorPrefix);\\n\\n                $errorMsg = $login->loginPrehooks->getErrorMessage();\\n                $errorOutput = $modx->parseChunk($errTpl, array(\'msg\' => $errorMsg));\\n                $modx->setPlaceholder(\'errors\',$errorOutput);\\n\\n            } else {\\n                \\/* send to login processor and handle response *\\/\\n                $c = array(\\n                    \'login_context\' => $loginContext,\\n                    \'add_contexts\' => $contexts,\\n                    \'username\' => $fields[\'username\'],\\n                    \'password\' => $fields[\'password\'],\\n                    \'returnUrl\' => $fields[\'returnUrl\'],\\n                    \'rememberme\' => !empty($fields[$rememberMeKey]) ? true : false,\\n                );\\n                $response = $modx->runProcessor(\'security\\/login\',$c);\\n\\n                \\/* if we\'ve got a good response, proceed *\\/\\n                if (!empty($response) && !$response->isError()) {\\n                    $responseArray = $response->getObject();\\n                    \\n                    \\/* do post hooks *\\/\\n                    $postHooks = $modx->getOption(\'postHooks\',$scriptProperties,\'\');\\n                    $login->loadHooks(\'posthooks\');\\n                    $fields = $_POST;\\n                    $fields[\'response\'] =& $responseArray;\\n                    $fields[\'contexts\'] =& $contexts;\\n                    $fields[\'loginContext\'] =& $loginContext;\\n                    $fields[\'loginResourceId\'] =& $loginResourceId;\\n                    $login->posthooks->loadMultiple($postHooks,$fields,array(\\n                        \'mode\' => \'login\',\\n                    ));\\n\\n                    \\/* process posthooks for login *\\/\\n                    if (!empty($login->posthooks->errors)) {\\n                        $modx->toPlaceholders($login->posthooks->errors,$errorPrefix);\\n\\n                        $errorMsg = $login->posthooks->getErrorMessage();\\n                        $modx->toPlaceholder(\'message\',$errorMsg,$errorPrefix);\\n                    } else {\\n                        \\/* allow dynamic redirection handling *\\/\\n                        $redirectBack = $modx->getOption(\'redirectBack\',$_REQUEST,$modx->getOption(\'redirectBack\',$scriptProperties,\'\'));\\n                        $redirectBackParams = $modx->getOption(\'redirectBackParams\',$_REQUEST,$modx->getOption(\'redirectBackParams\',$scriptProperties,\'\'));\\n                        if (!empty($redirectBackParams)) {\\n                            $redirectBackParams = $login->decodeParams($redirectBackParams);\\n                        }\\n                        \\/* otherwise specify a specific resource to redirect to *\\/\\n                        $loginResourceId = !empty($scriptProperties[\'loginResourceId\']) ? $scriptProperties[\'loginResourceId\'] : $redirectBack;\\n                        \\/* login posthooks succeeded, now redirect *\\/\\n\\n                        if (!empty($loginResourceId)) {\\n                            $loginResourceParams = !empty($scriptProperties[\'loginResourceParams\']) ? $scriptProperties[\'loginResourceParams\'] : $redirectBackParams;\\n                            if (!empty($loginResourceParams) && !is_array($loginResourceParams)) {\\n                                $loginResourceParams = $modx->fromJSON($loginResourceParams);\\n                            }\\n                            $url = $modx->makeUrl($loginResourceId,\'\',$loginResourceParams,\'full\');\\n                            $modx->sendRedirect($url);\\n                        } elseif (!empty($responseArray) && !empty($responseArray[\'url\'])) {\\n                            $modx->sendRedirect($responseArray[\'url\']);\\n                        } else {\\n                            $modx->sendRedirect($modx->getOption(\'site_url\'));\\n                        }\\n                    }\\n\\n                \\/* logout failed, output error *\\/\\n                } else {\\n                    $errorOutput = \'\';\\n                    $errors = $response->getFieldErrors();\\n                    $message = $response->getMessage();\\n                    $redirectToOnFailedAuth = $modx->getOption(\'redirectToOnFailedAuth\',$scriptProperties,false);\\n                    if ($redirectToOnFailedAuth && $redirectToOnFailedAuth != $modx->resource->get(\'id\')) {\\n                        $p = array(\\n                            \'u\' => $fields[\'username\'],\\n                        );\\n                        if (!empty($message)) $params[\'m\'] = $message;\\n                        $url = $modx->makeUrl($redirectToOnFailedAuth,\'\',$p,\'full\');\\n                        $modx->sendRedirect($url);\\n                    }\\n                    if (!empty($errors)) {\\n                        foreach ($errors as $error) {\\n                            $errorOutput .= $modx->parseChunk($errTpl, $error);\\n                        }\\n                    } elseif (!empty($message)) {\\n                        $errorOutput = $modx->parseChunk($errTpl, array(\'msg\' => $message));\\n                    } else {\\n                        $errorOutput = $modx->parseChunk($errTpl, array(\'msg\' => $modx->lexicon(\'login.login_err\')));\\n                    }\\n                    $modx->setPlaceholder(\'errors\', $errorOutput);\\n                }\\n            }\\n        } else {\\n            $modx->log(modX::LOG_LEVEL_ERROR,$modx->lexicon(\'login.invalid_post\',array(\\n                \'action\' => $_POST[$actionKey],\\n            )));\\n        }\\n\\n    \\/* logout *\\/\\n    } elseif ($_REQUEST[$actionKey] == $logoutKey && $authenticated) {\\n        \\/* set default REQUEST vars if not provided *\\/\\n        if (empty($_REQUEST[\'login_context\'])) $_REQUEST[\'login_context\'] = $loginContext;\\n\\n        \\/* do pre-register hooks *\\/\\n        $fields = $_REQUEST;\\n        $login->loadHooks(\'logoutPrehooks\');\\n        $login->logoutPrehooks->loadMultiple($preHooks,$fields,array(\\n            \'mode\' => \'logout\',\\n        ));\\n\\n        \\/* process prehooks error messages *\\/\\n        if (!empty($login->logoutPrehooks->errors)) {\\n            $modx->toPlaceholders($login->logoutPrehooks->errors,$errorPrefix);\\n\\n            $errorMsg = $login->logoutPrehooks->getErrorMessage();\\n            $errorOutput = $modx->parseChunk($errTpl, array(\'msg\' => $errorMsg));\\n            $modx->setPlaceholder(\'errors\',$errorOutput);\\n\\n        \\/* prehooks successful, move on *\\/\\n        } else {\\n            \\/* send to logout processor and handle response for each context *\\/\\n            $response = $modx->runProcessor(\'security\\/logout\',array(\\n                \'login_context\' => $loginContext,\\n                \'add_contexts\' => $contexts\\n            ));\\n            \\n            \\/* if successful logout *\\/\\n            if (!empty($response) && !$response->isError()) {\\n                $responseArray = $response->getObject();\\n                \\n                \\/* do post hooks for logout *\\/\\n                $postHooks = $modx->getOption(\'postHooks\',$scriptProperties,\'\');\\n                $login->loadHooks(\'posthooks\');\\n                $fields = $_POST;\\n                $fields[\'response\'] =& $responseArray;\\n                $fields[\'contexts\'] =& $contexts;\\n                $fields[\'loginContext\'] =& $loginContext;\\n                $fields[\'logoutResourceId\'] =& $logoutResourceId;\\n                $login->posthooks->loadMultiple($postHooks,$fields,array(\\n                    \'mode\' => \'logout\',\\n                ));\\n\\n                \\/* log posthooks errors *\\/\\n                if (!empty($login->posthooks->errors)) {\\n                    $modx->log(modX::LOG_LEVEL_ERROR,\'[Login] Post-Hook errors: \'.print_r($login->posthooks->errors,true));\\n\\n                    $errorMsg = $login->posthooks->getErrorMessage();\\n                    if (!empty($errorMsg)) {\\n                        $modx->log(modX::LOG_LEVEL_ERROR,\'[Login] Post-Hook error: \'.$errorMsg);\\n                    }\\n                }\\n\\n                \\/* redirect *\\/\\n                $logoutResourceId = $modx->getOption(\'logoutResourceId\',$scriptProperties,0);\\n                if (!empty($responseArray) && !empty($responseArray[\'url\'])) {\\n                    $modx->sendRedirect($responseArray[\'url\']);\\n                } elseif (!empty($logoutResourceId)) {\\n                    $logoutResourceParams = $modx->getOption(\'logoutResourceParams\',$scriptProperties,\'\');\\n                    if (!empty($logoutResourceParams)) {\\n                        $logoutResourceParams = $modx->fromJSON($logoutResourceParams);\\n                    }\\n                    $url = $modx->makeUrl($logoutResourceId,\'\',$logoutResourceParams,\'full\');\\n                    $modx->sendRedirect($url);\\n                } else {\\n                    $modx->sendRedirect($_SERVER[\'REQUEST_URI\']);\\n                }\\n\\n            \\/* logout failed, output error *\\/\\n            } else {\\n                $errorOutput = \'\';\\n                $errors = $response->getFieldErrors();\\n                $message = $response->getMessage();\\n                if (!empty($errors)) {\\n                    foreach ($errors as $error) {\\n                        $errorOutput .= $modx->parseChunk($errTpl, $error);\\n                    }\\n                } elseif (!empty($message)) {\\n                    $errorOutput = $modx->parseChunk($errTpl, array(\'msg\' => $message));\\n                } else {\\n                    $errorOutput = $modx->parseChunk($errTpl, array(\'msg\' => $modx->lexicon(\'login.logout_err\')));\\n                }\\n                $modx->setPlaceholder(\'errors\', $errorOutput);\\n            }\\n        }\\n    }\\n}\\n\\n$redirectToPrior = $modx->getOption(\'redirectToPrior\',$scriptProperties,false);\\n$tpl = $authenticated ? $logoutTpl : $loginTpl;\\n$actionMsg = $authenticated\\n    ? (!empty($logoutMsg) ? $logoutMsg : $modx->lexicon(\'login.logout\'))\\n    : (!empty($loginMsg) ? $loginMsg : $modx->lexicon(\'login\'));\\n\\n$modx->setPlaceholder(\'actionMsg\', $actionMsg);\\n$phs = $authenticated ? $scriptProperties : array_merge($scriptProperties, $_POST);\\nforeach ($phs as $k => $v) {\\n    $phs[$k] = str_replace(array(\'[\',\']\'),array(\'&#91;\',\'&#93;\'),$v);\\n}\\n\\/* make sure to strip out logout GET parameter to prevent ghost logout *\\/\\nif (!$redirectToPrior) {\\n    $phs[\'request_uri\'] = str_replace(array(\'?service=\'.$logoutKey,\'&service=\'.$logoutKey,\'&amp;service=\'.$logoutKey),\'\',$_SERVER[\'REQUEST_URI\']);\\n} else {\\n    $phs[\'request_uri\'] = str_replace(array(\'?service=\'.$logoutKey,\'&service=\'.$logoutKey,\'&amp;service=\'.$logoutKey),\'\',$_SERVER[\'HTTP_REFERER\']);\\n}\\n\\n\\/* properly build logout url *\\/\\nif ($authenticated) {\\n    $phs[\'logoutUrl\'] = $phs[\'request_uri\'];\\n    $phs[\'logoutUrl\'] .= strpos($phs[\'logoutUrl\'],\'?\') ? ($modx->getOption(\'xhtml_urls\',null,false) ? \'&amp;\' : \'&\') : \'?\';\\n    $phs[\'logoutUrl\'] .= $phs[\'actionKey\'].\'=\'.$phs[\'logoutKey\'];\\n    $phs[\'logoutUrl\'] = str_replace(array(\'?=\',\'&=\'),\'\',$phs[\'logoutUrl\']);\\n}\\n\\n\\/* if using recaptcha, load recaptcha html *\\/\\nif (strpos($preHooks,\'recaptcha\') !== false && !$authenticated) {\\n    $recaptcha = $modx->getService(\'recaptcha\',\'reCaptcha\',$login->config[\'modelPath\'].\'recaptcha\\/\');\\n    if ($recaptcha instanceof reCaptcha) {\\n        $modx->lexicon->load(\'login:recaptcha\');\\n        $recaptchaTheme = $modx->getOption(\'recaptchaTheme\',$scriptProperties,\'clean\');\\n        $recaptchaWidth = $modx->getOption(\'recaptchaWidth\',$scriptProperties,500);\\n        $recaptchaHeight = $modx->getOption(\'recaptchaHeight\',$scriptProperties,300);\\n        $html = $recaptcha->getHtml($recaptchaTheme,$recaptchaWidth,$recaptchaHeight);\\n        $modx->setPlaceholder(\'login.recaptcha_html\',$html);\\n    } else {\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[Login] \'.$modx->lexicon(\'login.recaptcha_err_load\'));\\n    }\\n}\\n\\n\\/* get output of form *\\/\\n$output = $login->getChunk($tpl,$phs,$tplType);\\n\\n\\/* if setting placeholder, set, otherwise, return (commas!) *\\/\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,\'\');\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;","locked":0,"properties":"a:22:{s:9:\\"actionKey\\";a:6:{s:4:\\"name\\";s:9:\\"actionKey\\";s:4:\\"desc\\";s:25:\\"prop_login.actionkey_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"service\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"loginKey\\";a:6:{s:4:\\"name\\";s:8:\\"loginKey\\";s:4:\\"desc\\";s:24:\\"prop_login.loginkey_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"login\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"logoutKey\\";a:6:{s:4:\\"name\\";s:9:\\"logoutKey\\";s:4:\\"desc\\";s:25:\\"prop_login.logoutkey_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:6:\\"logout\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:7:\\"tplType\\";a:6:{s:4:\\"name\\";s:7:\\"tplType\\";s:4:\\"desc\\";s:23:\\"prop_login.tpltype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"name\\";s:18:\\"opt_register.chunk\\";s:5:\\"value\\";s:8:\\"modChunk\\";}i:1;a:2:{s:4:\\"name\\";s:17:\\"opt_register.file\\";s:5:\\"value\\";s:4:\\"file\\";}i:2;a:2:{s:4:\\"name\\";s:19:\\"opt_register.inline\\";s:5:\\"value\\";s:6:\\"inline\\";}i:3;a:2:{s:4:\\"name\\";s:21:\\"opt_register.embedded\\";s:5:\\"value\\";s:8:\\"embedded\\";}}s:5:\\"value\\";s:8:\\"modChunk\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"loginTpl\\";a:6:{s:4:\\"name\\";s:8:\\"loginTpl\\";s:4:\\"desc\\";s:24:\\"prop_login.logintpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"lgnLoginTpl\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"logoutTpl\\";a:6:{s:4:\\"name\\";s:9:\\"logoutTpl\\";s:4:\\"desc\\";s:25:\\"prop_login.logouttpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"lgnLogoutTpl\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"preHooks\\";a:6:{s:4:\\"name\\";s:8:\\"preHooks\\";s:4:\\"desc\\";s:24:\\"prop_login.prehooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"postHooks\\";a:6:{s:4:\\"name\\";s:9:\\"postHooks\\";s:4:\\"desc\\";s:25:\\"prop_login.posthooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:6:\\"errTpl\\";a:6:{s:4:\\"name\\";s:6:\\"errTpl\\";s:4:\\"desc\\";s:22:\\"prop_login.errtpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"lgnErrTpl\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"errTplType\\";a:6:{s:4:\\"name\\";s:10:\\"errTplType\\";s:4:\\"desc\\";s:26:\\"prop_login.errtpltype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"name\\";s:18:\\"opt_register.chunk\\";s:5:\\"value\\";s:8:\\"modChunk\\";}i:1;a:2:{s:4:\\"name\\";s:17:\\"opt_register.file\\";s:5:\\"value\\";s:4:\\"file\\";}i:2;a:2:{s:4:\\"name\\";s:19:\\"opt_register.inline\\";s:5:\\"value\\";s:6:\\"inline\\";}i:3;a:2:{s:4:\\"name\\";s:21:\\"opt_register.embedded\\";s:5:\\"value\\";s:8:\\"embedded\\";}}s:5:\\"value\\";s:8:\\"modChunk\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"loginResourceId\\";a:6:{s:4:\\"name\\";s:15:\\"loginResourceId\\";s:4:\\"desc\\";s:31:\\"prop_login.loginresourceid_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:0;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:19:\\"loginResourceParams\\";a:6:{s:4:\\"name\\";s:19:\\"loginResourceParams\\";s:4:\\"desc\\";s:35:\\"prop_login.loginresourceparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:16:\\"logoutResourceId\\";a:6:{s:4:\\"name\\";s:16:\\"logoutResourceId\\";s:4:\\"desc\\";s:32:\\"prop_login.logoutresourceid_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:0;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:20:\\"logoutResourceParams\\";a:6:{s:4:\\"name\\";s:20:\\"logoutResourceParams\\";s:4:\\"desc\\";s:36:\\"prop_login.logoutresourceparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"loginMsg\\";a:6:{s:4:\\"name\\";s:8:\\"loginMsg\\";s:4:\\"desc\\";s:24:\\"prop_login.loginmsg_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"logoutMsg\\";a:6:{s:4:\\"name\\";s:9:\\"logoutMsg\\";s:4:\\"desc\\";s:25:\\"prop_login.logoutmsg_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"redirectToPrior\\";a:6:{s:4:\\"name\\";s:15:\\"redirectToPrior\\";s:4:\\"desc\\";s:31:\\"prop_login.redirecttoprior_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:22:\\"redirectToOnFailedAuth\\";a:6:{s:4:\\"name\\";s:22:\\"redirectToOnFailedAuth\\";s:4:\\"desc\\";s:38:\\"prop_login.redirecttoonfailedauth_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:13:\\"rememberMeKey\\";a:6:{s:4:\\"name\\";s:13:\\"rememberMeKey\\";s:4:\\"desc\\";s:29:\\"prop_login.remembermekey_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:10:\\"rememberme\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"contexts\\";a:6:{s:4:\\"name\\";s:8:\\"contexts\\";s:4:\\"desc\\";s:24:\\"prop_login.contexts_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:13:\\"toPlaceholder\\";a:6:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:29:\\"prop_login.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:14:\\"recaptchaTheme\\";a:6:{s:4:\\"name\\";s:14:\\"recaptchaTheme\\";s:4:\\"desc\\";s:33:\\"prop_register.recaptchatheme_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"text\\";s:16:\\"opt_register.red\\";s:5:\\"value\\";s:3:\\"red\\";}i:1;a:2:{s:4:\\"text\\";s:18:\\"opt_register.white\\";s:5:\\"value\\";s:5:\\"white\\";}i:2;a:2:{s:4:\\"text\\";s:18:\\"opt_register.clean\\";s:5:\\"value\\";s:5:\\"clean\\";}i:3;a:2:{s:4:\\"text\\";s:23:\\"opt_register.blackglass\\";s:5:\\"value\\";s:10:\\"blackglass\\";}}s:5:\\"value\\";s:5:\\"clean\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => '9737580148530655132c4efa9f9250ec',
        'native_key' => 0,
        'signature' => '16a452ebea856cc389b7d85e66a39ac1',
      ),
      '705028fd721a4bf3751fdaf641e65d8c' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"name":"ForgotPassword","description":"Displays a forgot password form.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * ForgotPassword\\n *\\n * Copyright 2010 by Jason Coward <jason@modx.com> and Shaun McCormick\\n * <shaun@modx.com>\\n *\\n * ForgotPassword is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * ForgotPassword is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * ForgotPassword; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx ForgotPassword Snippet. Displays a form for users who have forgotten\\n * their password and gives them the ability to retrieve it.\\n *\\n * @package login\\n *\\/\\nrequire_once $modx->getOption(\'login.core_path\',null,$modx->getOption(\'core_path\').\'components\\/login\\/\').\'model\\/login\\/login.class.php\';\\n$login = new Login($modx,$scriptProperties);\\n\\n$modx->lexicon->load(\'login:forgotpassword\');\\n\\n\\/* set default properties *\\/\\n$tpl = !empty($tpl) ? $tpl : \'lgnForgotPassTpl\';\\n$tplType = !empty($tplType) ? $tplType : \'modChunk\';\\n$sentTpl = !empty($sentTpl) ? $sentTpl : \'lgnForgotPassSentTpl\';\\n$sentTplType = !empty($sentTplType) ? $sentTplType : \'modChunk\';\\n$emailTpl = !empty($emailTpl) ? $emailTpl : \'lgnForgotPassEmail\';\\n$emailTplType = !empty($emailTplType) ? $emailTplType : \'modChunk\';\\n$emailSubject = !empty($emailSubject) ? $emailSubject : \'\';\\n$resetResourceId = !empty($resetResourceId) ? $resetResourceId : 1;\\n$redirectTo = $modx->getOption(\'redirectTo\',$scriptProperties,false);\\n$redirectParams = $modx->getOption(\'redirectParams\',$scriptProperties,\'\');\\n$preHooks = $modx->getOption(\'preHooks\',$scriptProperties,\'\');\\n\\n\\/* get the request URI *\\/\\n$phs = array(\\n    \'loginfp.request_uri\' => empty($_POST[\'request_uri\']) ? $login->getRequestURI() : $_POST[\'request_uri\'],\\n);\\n\\nif (!empty($_POST[\'login_fp_service\'])) {\\n    $success = false;\\n    $field = \'username\';\\n    $alias = \'modUser\';\\n    if (empty($_POST[\'username\']) && !empty($_POST[\'email\'])) {\\n        $field = \'email\';\\n        $alias = \'Profile\';\\n    }\\n    foreach ($_REQUEST as $k => $v) {\\n        $fields[$k] = str_replace(array(\'[\',\']\'),array(\'&#91;\',\'&#93\'),$v);\\n    }\\n    $login->loadHooks(\'fpPreHooks\');\\n    $login->fpPreHooks->loadMultiple($preHooks,$fields,array(\\n        \'mode\' => Login::MODE_FORGOT_PASSWORD,\\n    ));\\n    \\/* process prehooks *\\/\\n    if (!empty($login->fpPreHooks->errors)) {\\n        $modx->toPlaceholders($login->fpPreHooks->errors,$errorPrefix);\\n\\n        $errorMsg = $login->fpPreHooks->getErrorMessage();\\n        $errorOutput = $modx->parseChunk($errTpl, array(\'msg\' => $errorMsg));\\n        $modx->setPlaceholder(\'errors\',$errorOutput);\\n\\n    } else {\\n        if (!empty($login->fpPreHooks->fields)) {\\n            $fields = $login->fpPreHooks->fields;\\n        }\\n\\n        \\/* if the prehook didn\'t set the user info, find it by email\\/username *\\/\\n        if (empty($fields[Login::FORGOT_PASSWORD_EXTERNAL_USER])) {\\n            \\/* get the user dependent on the retrieval method *\\/\\n            $user = $login->getUserByField($field,$fields[$field],$alias);\\n            if ($user) {\\n                $fields = array_merge($fields,$user->toArray());\\n                $profile = $user->getOne(\'Profile\');\\n                if ($profile) { \\/* merge in profile *\\/\\n                    $fields = array_merge($profile->toArray(),$fields);\\n                }\\n            }\\n        }\\n        \\n        if ($user == null) {\\n            $phs[\'loginfp.errors\'] = $modx->lexicon(\'login.user_err_nf_\'.$field);\\n        } else {\\n            $phs[\'email\'] = $fields[\'email\'];\\n\\n            \\/* generate a password and encode it and the username into the url *\\/\\n            $pword = $login->generatePassword();\\n            $confirmParams = array(\\n                \'lp\' => urlencode(base64_encode($pword)),\\n                \'lu\' => urlencode(base64_encode($fields[\'username\']))\\n            );\\n            $confirmUrl = $modx->makeUrl($resetResourceId,\'\',$confirmParams,\'full\');\\n\\n            \\/* set the email properties *\\/\\n            $emailProperties = $fields;\\n            $emailProperties[\'confirmUrl\'] = $confirmUrl;\\n            $emailProperties[\'password\'] = $pword;\\n            $emailProperties[\'tpl\'] = $emailTpl;\\n            $emailProperties[\'tplType\'] = $emailTplType;\\n\\n            \\/* now set new password to cache to prevent middleman attacks *\\/\\n            $modx->cacheManager->set(\'login\\/resetpassword\\/\'.$fields[\'username\'],$pword);\\n\\n            $subject = !empty($emailSubject) ? $emailSubject : $modx->getOption(\'login.forgot_password_email_subject\',$scriptProperties,$modx->lexicon(\'login.forgot_password_email_subject\'));\\n            $login->sendEmail($fields[\'email\'],$fields[\'username\'],$subject,$emailProperties);\\n            $tpl = $sentTpl;\\n            $tplType = $sentTplType;\\n\\n            \\/* if redirecting, do so here *\\/\\n            if (!empty($redirectTo)) {\\n                if (!empty($redirectParams)) $redirectParams = $modx->fromJSON($redirectParams);\\n                $url = $modx->makeUrl($redirectTo,\'\',$redirectParams,\'full\');\\n                $modx->sendRedirect($url);\\n            }\\n        }\\n    }\\n}\\nif (!empty($_POST)) {\\n    foreach ($_POST as $k => $v) {\\n        $phs[\'loginfp.post.\'.$k] = str_replace(array(\'[\',\']\'),array(\'&#91;\',\'&#93\'),$v);\\n    }\\n}\\n\\n$output = $login->getChunk($tpl,$phs,$tplType);\\n\\nreturn $output;","locked":0,"properties":"a:10:{s:8:\\"emailTpl\\";a:6:{s:4:\\"name\\";s:8:\\"emailTpl\\";s:4:\\"desc\\";s:33:\\"prop_forgotpassword.emailtpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:18:\\"lgnForgotPassEmail\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"emailTplType\\";a:6:{s:4:\\"name\\";s:12:\\"emailTplType\\";s:4:\\"desc\\";s:37:\\"prop_forgotpassword.emailtpltype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"name\\";s:18:\\"opt_register.chunk\\";s:5:\\"value\\";s:8:\\"modChunk\\";}i:1;a:2:{s:4:\\"name\\";s:17:\\"opt_register.file\\";s:5:\\"value\\";s:4:\\"file\\";}i:2;a:2:{s:4:\\"name\\";s:19:\\"opt_register.inline\\";s:5:\\"value\\";s:6:\\"inline\\";}i:3;a:2:{s:4:\\"name\\";s:21:\\"opt_register.embedded\\";s:5:\\"value\\";s:8:\\"embedded\\";}}s:5:\\"value\\";s:8:\\"modChunk\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:7:\\"sentTpl\\";a:6:{s:4:\\"name\\";s:7:\\"sentTpl\\";s:4:\\"desc\\";s:32:\\"prop_forgotpassword.senttpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\"lgnForgotPassSentTpl\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:11:\\"sentTplType\\";a:6:{s:4:\\"name\\";s:11:\\"sentTplType\\";s:4:\\"desc\\";s:36:\\"prop_forgotpassword.senttpltype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"name\\";s:18:\\"opt_register.chunk\\";s:5:\\"value\\";s:8:\\"modChunk\\";}i:1;a:2:{s:4:\\"name\\";s:17:\\"opt_register.file\\";s:5:\\"value\\";s:4:\\"file\\";}i:2;a:2:{s:4:\\"name\\";s:19:\\"opt_register.inline\\";s:5:\\"value\\";s:6:\\"inline\\";}i:3;a:2:{s:4:\\"name\\";s:21:\\"opt_register.embedded\\";s:5:\\"value\\";s:8:\\"embedded\\";}}s:5:\\"value\\";s:8:\\"modChunk\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:3:\\"tpl\\";a:6:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:28:\\"prop_forgotpassword.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:16:\\"lgnForgotPassTpl\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:7:\\"tplType\\";a:6:{s:4:\\"name\\";s:7:\\"tplType\\";s:4:\\"desc\\";s:32:\\"prop_forgotpassword.tpltype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"name\\";s:18:\\"opt_register.chunk\\";s:5:\\"value\\";s:8:\\"modChunk\\";}i:1;a:2:{s:4:\\"name\\";s:17:\\"opt_register.file\\";s:5:\\"value\\";s:4:\\"file\\";}i:2;a:2:{s:4:\\"name\\";s:19:\\"opt_register.inline\\";s:5:\\"value\\";s:6:\\"inline\\";}i:3;a:2:{s:4:\\"name\\";s:21:\\"opt_register.embedded\\";s:5:\\"value\\";s:8:\\"embedded\\";}}s:5:\\"value\\";s:8:\\"modChunk\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"emailSubject\\";a:6:{s:4:\\"name\\";s:12:\\"emailSubject\\";s:4:\\"desc\\";s:37:\\"prop_forgotpassword.emailsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"resetResourceId\\";a:6:{s:4:\\"name\\";s:15:\\"resetResourceId\\";s:4:\\"desc\\";s:40:\\"prop_forgotpassword.resetresourceid_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"redirectTo\\";a:6:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:35:\\"prop_forgotpassword.redirectto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:14:\\"redirectParams\\";a:6:{s:4:\\"name\\";s:14:\\"redirectParams\\";s:4:\\"desc\\";s:39:\\"prop_forgotpassword.redirectparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => '78e39981bed6be914eb78454f3f3adda',
        'native_key' => 1,
        'signature' => '8bb9d6ccb8f5b2dac0cc0c66df2f430a',
      ),
      '72417400c438739eb94e81ed0e15718a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"name":"ResetPassword","description":"Resets a password from a confirmation email.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * ResetPassword\\n *\\n * Copyright 2010 by Shaun McCormick <shaun@modx.com>\\n *\\n * ResetPassword is free software; you can redistribute it and\\/or modify it\\n * under the terms of the GNU General Public License as published by the Free\\n * Software Foundation; either version 2 of the License, or (at your option) any\\n * later version.\\n *\\n * ResetPassword is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * ResetPassword; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx ResetPassword Snippet. Snippet to place on an activation\\n * page that the user using the ForgotPassword snippet would be sent to via the\\n * reset email.\\n *\\n * @package login\\n *\\/\\nif (empty($_REQUEST[\'lp\']) || empty($_REQUEST[\'lu\'])) {\\n    return \'\';\\n}\\nrequire_once $modx->getOption(\'login.core_path\',null,$modx->getOption(\'core_path\').\'components\\/login\\/\').\'model\\/login\\/login.class.php\';\\n$login = new Login($modx,$scriptProperties);\\n\\n\\/* setup default properties *\\/\\n$tpl = !empty($tpl) ? $tpl : \'lgnResetPassTpl\';\\n$tplType = !empty($tplType) ? $tplType : \'modChunk\';\\n$loginResourceId = !empty($loginResourceId) ? $loginResourceId : 1;\\n$debug = isset($debug) ? $debug : false;\\n\\n\\/* get user from query params *\\/\\n$username = base64_decode(urldecode($_REQUEST[\'lu\']));\\n$password = base64_decode(urldecode($_REQUEST[\'lp\']));\\n\\n\\/* validate we have correct user *\\/\\n$user = $modx->getObject(\'modUser\',array(\'username\' => $username));\\nif ($user == null) return \'\';\\n\\n\\/* validate password to prevent middleman attacks *\\/\\n$cacheKey = \'login\\/resetpassword\\/\'.$user->get(\'username\');\\n$cachePass = $modx->cacheManager->get($cacheKey);\\nif ($cachePass != $password) return \'\';\\n$modx->cacheManager->delete($cacheKey);\\n\\n\\/* change password *\\/\\n$version = $modx->getVersionData();\\nif (version_compare($version[\'full_version\'],\'2.1.0-rc1\') >= 0) {\\n    $user->set(\'password\',$password);\\n} else {\\n    $user->set(\'password\',md5($password));\\n}\\nif (!$debug) {\\n    if ($user->save() == false) return \'\';\\n}\\n\\n$modx->invokeEvent(\'OnWebChangePassword\', array (\\n    \'userid\' => $user->get(\'id\'),\\n    \'username\' => $user->get(\'username\'),\\n    \'userpassword\' => $password,\\n    \'user\' => &$user,\\n    \'newpassword\' => $password,\\n));\\n$modx->invokeEvent(\'OnUserChangePassword\', array (\\n    \'userid\' => $user->get(\'id\'),\\n    \'username\' => $user->get(\'username\'),\\n    \'userpassword\' => $password,\\n    \'user\' => &$user,\\n    \'newpassword\' => $password,\\n));\\n\\n$phs = array(\\n    \'username\' => $user->get(\'username\'),\\n    \'loginUrl\' => $modx->makeUrl($loginResourceId),\\n);\\n\\n$output = $login->getChunk($tpl,$phs,$tplType);\\n\\nreturn $output;","locked":0,"properties":"a:3:{s:3:\\"tpl\\";a:6:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:27:\\"prop_resetpassword.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:15:\\"lgnResetPassTpl\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:7:\\"tplType\\";a:6:{s:4:\\"name\\";s:7:\\"tplType\\";s:4:\\"desc\\";s:31:\\"prop_resetpassword.tpltype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"name\\";s:18:\\"opt_register.chunk\\";s:5:\\"value\\";s:8:\\"modChunk\\";}i:1;a:2:{s:4:\\"name\\";s:17:\\"opt_register.file\\";s:5:\\"value\\";s:4:\\"file\\";}i:2;a:2:{s:4:\\"name\\";s:19:\\"opt_register.inline\\";s:5:\\"value\\";s:6:\\"inline\\";}i:3;a:2:{s:4:\\"name\\";s:21:\\"opt_register.embedded\\";s:5:\\"value\\";s:8:\\"embedded\\";}}s:5:\\"value\\";s:8:\\"modChunk\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"loginResourceId\\";a:6:{s:4:\\"name\\";s:15:\\"loginResourceId\\";s:4:\\"desc\\";s:39:\\"prop_resetpassword.loginresourceid_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => '561cae170165b6d7db4299657e7160f2',
        'native_key' => 2,
        'signature' => '7a5f7d874a9e8abf1b000be46b4425f1',
      ),
      '2c21f83d1bee5c31a182039ac043a4b2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":3,"name":"Register","description":"Handles forms for registering users on the front-end.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Register\\n *\\n * Copyright 2010 by Shaun McCormick <shaun@modx.com>\\n *\\n * Register is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Register is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Register; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx Register Snippet. Handles User registrations.\\n * \\n * @package login\\n *\\/\\nrequire_once $modx->getOption(\'login.core_path\',null,$modx->getOption(\'core_path\').\'components\\/login\\/\').\'model\\/login\\/login.class.php\';\\n$login = new Login($modx,$scriptProperties);\\n\\n\\/* setup default properties *\\/\\n$preHooks = $modx->getOption(\'preHooks\',$scriptProperties,\'\');\\n$submitVar = $modx->getOption(\'submitVar\',$scriptProperties,\'login-register-btn\');\\n$errTpl = $modx->getOption(\'errTpl\',$scriptProperties,\'<span class=\\"error\\">[[+error]]<\\/span>\');\\n$validate = $modx->getOption(\'validate\',$scriptProperties,\'\');\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'\');\\n\\n\\/* see if form has submitted *\\/\\n$hasPosted = !empty($_POST) && (empty($submitVar) || !empty($_POST[$submitVar]));\\n\\n\\/* if using recaptcha, load recaptcha html *\\/\\nif (strpos($preHooks,\'recaptcha\') !== false) {\\n    $recaptcha = $modx->getService(\'recaptcha\',\'reCaptcha\',$login->config[\'modelPath\'].\'recaptcha\\/\');\\n    if ($recaptcha instanceof reCaptcha) {\\n        $modx->lexicon->load(\'login:recaptcha\');\\n        $recaptchaTheme = $modx->getOption(\'recaptchaTheme\',$scriptProperties,\'clean\');\\n        $recaptchaWidth = $modx->getOption(\'recaptchaWidth\',$scriptProperties,500);\\n        $recaptchaHeight = $modx->getOption(\'recaptchaHeight\',$scriptProperties,300);\\n        $html = $recaptcha->getHtml($recaptchaTheme,$recaptchaWidth,$recaptchaHeight);\\n        $modx->setPlaceholder($placeholderPrefix.\'recaptcha_html\',$html);\\n    } else {\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'[Register] \'.$this->modx->lexicon(\'register.recaptcha_err_load\'));\\n    }\\n}\\n\\n\\/* if using math hook, load default placeholders *\\/\\nif (strpos($preHooks,\'math\') !== false && !$hasPosted) {\\n    $mathMaxRange = $modx->getOption(\'mathMaxRange\',$scriptProperties,100);\\n    $mathMinRange = $modx->getOption(\'mathMinRange\',$scriptProperties,10);\\n    $op1 = rand($mathMinRange,$mathMaxRange);\\n    $op2 = rand($mathMinRange,$mathMaxRange);\\n    if ($op2 > $op1) { $t = $op2; $op2 = $op1; $op1 = $t; } \\/* swap so we always get positive #s *\\/\\n    $operators = array(\'+\',\'-\');\\n    $operator = rand(0,1);\\n    $modx->setPlaceholders(array(\\n        $modx->getOption(\'mathOp1Field\',$scriptProperties,\'op1\') => $op1,\\n        $modx->getOption(\'mathOp2Field\',$scriptProperties,\'op2\') => $op2,\\n        $modx->getOption(\'mathOperatorField\',$scriptProperties,\'operator\') => $operators[$operator],\\n    ),$placeholderPrefix);\\n}\\n\\n\\/* check for POST *\\/\\nif ($hasPosted) {\\n    $modx->lexicon->load(\'login:register\');\\n\\n    \\/* set default properties *\\/\\n    $usernameField = $modx->getOption(\'usernameField\',$scriptProperties,\'username\');\\n    $emailField = $modx->getOption(\'emailField\',$scriptProperties,\'email\');\\n    $passwordField = $modx->getOption(\'passwordField\',$scriptProperties,\'password\');\\n    $properties = array();\\n\\n    \\/* handle validation *\\/\\n    $login->loadValidator();\\n    $fields = $login->validator->validateFields($_POST,$validate);\\n    foreach ($fields as $k => $v) {\\n        $fields[$k] = str_replace(array(\'[\',\']\'),array(\'&#91;\',\'&#93;\'),$v);\\n    }\\n\\n    \\/* ensure username field exists and isn\'t empty *\\/\\n    if (empty($fields[$usernameField])) {\\n        $login->validator->addError($usernameField,$modx->lexicon(\'register.field_required\'));\\n    } else {\\n        \\/* make sure username isnt taken *\\/\\n        $alreadyExists = $modx->getObject(\'modUser\',array(\'username\' => $fields[$usernameField]));\\n        if ($alreadyExists) {\\n            $cachePwd = $alreadyExists->get(\'cachepwd\');\\n            if ($alreadyExists->get(\'active\') == 0 && !empty($cachePwd)) {\\n                \\/* if inactive and has a cachepwd, probably an expired\\n                 * activation account, so let\'s remove it\\n                 * and let user re-register\\n                 *\\/\\n                if (!$alreadyExists->remove()) {\\n                    $modx->log(modX::LOG_LEVEL_ERROR,\'[Login] Could not remove old, deactive user with cachepwd.\');\\n                }\\n            } else {\\n                $login->validator->addError($usernameField,$modx->lexicon(\'register.username_taken\'));\\n            }\\n        }\\n    }\\n\\n    \\/* ensure password field isn\'t empty *\\/\\n    if (empty($fields[$passwordField])) {\\n        $login->validator->addError($passwordField,$modx->lexicon(\'register.field_required\'));\\n    }\\n    \\/* ensure email field isn\'t empty *\\/\\n    if (empty($fields[$emailField])) {\\n        $login->validator->addError($emailField,$modx->lexicon(\'register.field_required\'));\\n    \\/* ensure if allow_multiple_emails setting is false, prevent duplicate emails *\\/\\n    } else if (!$modx->getOption(\'allow_multiple_emails\',null,false)) {\\n        $emailTaken = $modx->getObject(\'modUserProfile\',array(\'email\' => $fields[$emailField]));\\n        if ($emailTaken) {\\n            $login->validator->addError($emailField,$modx->lexicon(\'register.email_taken\',array(\'email\' => $fields[$emailField])));\\n        }\\n    }\\n\\n    if (empty($login->validator->errors)) {\\n        \\/* do pre-register hooks *\\/\\n        $login->loadHooks(\'preHooks\');\\n        $login->preHooks->loadMultiple($preHooks,$fields,array(\\n            \'submitVar\' => $submitVar,\\n            \'usernameField\' => $usernameField,\\n        ));\\n        if (!empty($login->preHooks->fields)) {\\n            $fields = $login->preHooks->fields;\\n        }\\n\\n        \\/* process hooks *\\/\\n        if (!empty($login->preHooks->errors)) {\\n            $modx->toPlaceholders($login->preHooks->errors,$placeholderPrefix.\'error\');\\n\\n            $errorMsg = $login->preHooks->getErrorMessage();\\n            $modx->setPlaceholder($placeholderPrefix.\'error.message\',$errorMsg);\\n        } else {\\n            \\/* everything good, go ahead and register *\\/\\n            $result = require_once $login->config[\'processorsPath\'].\'register.php\';\\n            if ($result !== true) {\\n                $modx->setPlaceholder($placeholderPrefix.\'error.message\',$result);\\n            }\\n        }\\n    } else {\\n        $modx->toPlaceholders($login->validator->errors,$placeholderPrefix.\'error\');\\n        $modx->setPlaceholder($placeholderPrefix.\'validation_error\',true);\\n    }\\n    $modx->setPlaceholders($fields,$placeholderPrefix);\\n}\\n\\nreturn \'\';","locked":0,"properties":"a:28:{s:9:\\"submitVar\\";a:6:{s:4:\\"name\\";s:9:\\"submitVar\\";s:4:\\"desc\\";s:28:\\"prop_register.submitvar_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"usergroups\\";a:6:{s:4:\\"name\\";s:10:\\"usergroups\\";s:4:\\"desc\\";s:29:\\"prop_register.usergroups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:19:\\"submittedResourceId\\";a:6:{s:4:\\"name\\";s:19:\\"submittedResourceId\\";s:4:\\"desc\\";s:38:\\"prop_register.submittedresourceid_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:13:\\"usernameField\\";a:6:{s:4:\\"name\\";s:13:\\"usernameField\\";s:4:\\"desc\\";s:32:\\"prop_register.usernamefield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"username\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:13:\\"passwordField\\";a:6:{s:4:\\"name\\";s:13:\\"passwordField\\";s:4:\\"desc\\";s:32:\\"prop_register.passwordfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"password\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"emailField\\";a:6:{s:4:\\"name\\";s:10:\\"emailField\\";s:4:\\"desc\\";s:29:\\"prop_register.emailfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"successMsg\\";a:6:{s:4:\\"name\\";s:10:\\"successMsg\\";s:4:\\"desc\\";s:29:\\"prop_register.successmsg_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:13:\\"persistParams\\";a:6:{s:4:\\"name\\";s:13:\\"persistParams\\";s:4:\\"desc\\";s:32:\\"prop_register.persistparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"preHooks\\";a:6:{s:4:\\"name\\";s:8:\\"preHooks\\";s:4:\\"desc\\";s:27:\\"prop_register.prehooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"postHooks\\";a:6:{s:4:\\"name\\";s:9:\\"postHooks\\";s:4:\\"desc\\";s:28:\\"prop_register.posthooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:11:\\"useExtended\\";a:6:{s:4:\\"name\\";s:11:\\"useExtended\\";s:4:\\"desc\\";s:30:\\"prop_register.useextended_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"excludeExtended\\";a:6:{s:4:\\"name\\";s:15:\\"excludeExtended\\";s:4:\\"desc\\";s:34:\\"prop_register.excludeextended_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"activation\\";a:6:{s:4:\\"name\\";s:10:\\"activation\\";s:4:\\"desc\\";s:29:\\"prop_register.activation_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:13:\\"activationttl\\";a:6:{s:4:\\"name\\";s:13:\\"activationttl\\";s:4:\\"desc\\";s:32:\\"prop_register.activationttl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"180\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:20:\\"activationResourceId\\";a:6:{s:4:\\"name\\";s:20:\\"activationResourceId\\";s:4:\\"desc\\";s:39:\\"prop_register.activationresourceid_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"activationEmail\\";a:6:{s:4:\\"name\\";s:15:\\"activationEmail\\";s:4:\\"desc\\";s:34:\\"prop_register.activationemail_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:22:\\"activationEmailSubject\\";a:6:{s:4:\\"name\\";s:22:\\"activationEmailSubject\\";s:4:\\"desc\\";s:41:\\"prop_register.activationemailsubject_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:22:\\"activationEmailTplType\\";a:6:{s:4:\\"name\\";s:22:\\"activationEmailTplType\\";s:4:\\"desc\\";s:41:\\"prop_register.activationemailtpltype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"name\\";s:18:\\"opt_register.chunk\\";s:5:\\"value\\";s:8:\\"modChunk\\";}i:1;a:2:{s:4:\\"name\\";s:17:\\"opt_register.file\\";s:5:\\"value\\";s:4:\\"file\\";}i:2;a:2:{s:4:\\"name\\";s:19:\\"opt_register.inline\\";s:5:\\"value\\";s:6:\\"inline\\";}i:3;a:2:{s:4:\\"name\\";s:21:\\"opt_register.embedded\\";s:5:\\"value\\";s:8:\\"embedded\\";}}s:5:\\"value\\";s:8:\\"modChunk\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:18:\\"activationEmailTpl\\";a:6:{s:4:\\"name\\";s:18:\\"activationEmailTpl\\";s:4:\\"desc\\";s:37:\\"prop_register.activationemailtpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:19:\\"lgnActivateEmailTpl\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:19:\\"moderatedResourceId\\";a:6:{s:4:\\"name\\";s:19:\\"moderatedResourceId\\";s:4:\\"desc\\";s:38:\\"prop_register.moderatedresourceid_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:17:\\"placeholderPrefix\\";a:6:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:36:\\"prop_register.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:14:\\"recaptchaTheme\\";a:6:{s:4:\\"name\\";s:14:\\"recaptchaTheme\\";s:4:\\"desc\\";s:33:\\"prop_register.recaptchatheme_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"text\\";s:16:\\"opt_register.red\\";s:5:\\"value\\";s:3:\\"red\\";}i:1;a:2:{s:4:\\"text\\";s:18:\\"opt_register.white\\";s:5:\\"value\\";s:5:\\"white\\";}i:2;a:2:{s:4:\\"text\\";s:18:\\"opt_register.clean\\";s:5:\\"value\\";s:5:\\"clean\\";}i:3;a:2:{s:4:\\"text\\";s:23:\\"opt_register.blackglass\\";s:5:\\"value\\";s:10:\\"blackglass\\";}}s:5:\\"value\\";s:5:\\"clean\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"mathMinRange\\";a:6:{s:4:\\"name\\";s:12:\\"mathMinRange\\";s:4:\\"desc\\";s:31:\\"prop_register.mathminrange_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:10;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"mathMaxRange\\";a:6:{s:4:\\"name\\";s:12:\\"mathMaxRange\\";s:4:\\"desc\\";s:31:\\"prop_register.mathmaxrange_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:100;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"mathField\\";a:6:{s:4:\\"name\\";s:9:\\"mathField\\";s:4:\\"desc\\";s:28:\\"prop_register.mathfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"math\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"mathOp1Field\\";a:6:{s:4:\\"name\\";s:12:\\"mathOp1Field\\";s:4:\\"desc\\";s:31:\\"prop_register.mathop1field_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"op1\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"mathOp2Field\\";a:6:{s:4:\\"name\\";s:12:\\"mathOp2Field\\";s:4:\\"desc\\";s:31:\\"prop_register.mathop2field_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"op2\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:17:\\"mathOperatorField\\";a:6:{s:4:\\"name\\";s:17:\\"mathOperatorField\\";s:4:\\"desc\\";s:36:\\"prop_register.mathoperatorfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:8:\\"operator\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => '61b41ce7e917a088eef1ab22e8e3c8ad',
        'native_key' => 3,
        'signature' => '75e5f25b4ac8fac1053e9c7b3881418a',
      ),
      '4fbaecdbd545fddce52a5d9b5d8927c6' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":4,"name":"ConfirmRegister","description":"Handles activation of registered user.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Register\\n *\\n * Copyright 2010 by Shaun McCormick <shaun@modx.com>\\n *\\n * Register is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Register is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Register; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx Confirm Register Activation Snippet. Snippet to place on an activation\\n * page that the user using the Register snippet would be sent to via the\\n * activation email.\\n *\\n * @package login\\n *\\/\\n$model_path = $modx->getOption(\'core_path\').\'components\\/login\\/model\\/login\\/\';\\n$Login = $modx->getService(\'login\',\'Login\',$model_path,$scriptProperties);\\n$modx->lexicon->load(\'login:register\');\\n\\n\\/* get default properties *\\/\\n$errorPage = $modx->getOption(\'errorPage\',$scriptProperties,false);\\n\\n\\/* get user from query params *\\/\\nif (empty($_REQUEST[\'lp\']) || empty($_REQUEST[\'lu\'])) {\\n    if (!empty($errorPage)) {\\n        $url = $modx->makeUrl($errorPage,\'\',\'\',\'full\');\\n        $modx->sendRedirect($url);\\n    } else {\\n        $modx->sendErrorPage();\\n    }\\n}\\n$username = base64_decode(urldecode(rawurldecode($_REQUEST[\'lu\'])));\\n$password = base64_decode(urldecode(rawurldecode($_REQUEST[\'lp\'])));\\n\\n\\/* validate we have correct user *\\/\\n$user = $modx->getObject(\'modUser\',array(\'username\' => $username));\\nif ($user == null || $user->get(\'active\')) { \\n    if (!empty($errorPage)) {\\n        $url = $modx->makeUrl($errorPage,\'\',\'\',\'full\');\\n        $modx->sendRedirect($url);\\n    } else {\\n        $modx->sendErrorPage();\\n    }\\n}\\n\\n\\/* validate password to prevent middleman attacks *\\/\\n$modx->getService(\'registry\', \'registry.modRegistry\');\\n$modx->registry->addRegister(\'login\',\'registry.modFileRegister\');\\n$modx->registry->login->connect();\\n$modx->registry->login->subscribe(\'\\/useractivation\\/\'.$user->get(\'username\'));\\n$msgs = $modx->registry->login->read();\\nif (empty($msgs)) $modx->sendErrorPage();\\n$found = false;\\nforeach ($msgs as $msg) {\\n    if ($msg == $password) $found = true;\\n}\\nif (!$found) {\\n    if (!empty($errorPage)) {\\n        $url = $modx->makeUrl($errorPage,\'\',\'\',\'full\');\\n        $modx->sendRedirect($url);\\n    } else {\\n        $modx->sendErrorPage();\\n    }\\n}\\n\\n\\/* invoke OnBeforeUserActivateEvent, if result returns anything, do not proceed *\\/\\n$result = $modx->invokeEvent(\'OnBeforeUserActivate\',array(\\n    \'user\' => &$user,\\n));\\n$preventActivation = $Login->getEventResult($result);\\nif (!empty($preventActivation)) {\\n    $modx->log(modX::LOG_LEVEL_ERROR,\'[Register] OnBeforeUserActivate event prevented activation for \\"\'.$user->get(\'username\').\'\\" by returning false: \'.$preventActivation);\\n    if (!empty($errorPage)) {\\n        $url = $modx->makeUrl($errorPage,\'\',\'\',\'full\');\\n        $modx->sendRedirect($url);\\n    } else {\\n        $modx->sendErrorPage();\\n    }\\n}\\n\\n\\/* activate user *\\/\\n$user->set(\'active\',1);\\n$user->set(\'cachepwd\',\'\');\\nif (!$user->save()) {\\n    $modx->log(modX::LOG_LEVEL_ERROR,\'[Register] Could not save activated user: \'.$user->get(\'username\'));\\n    return \'\';\\n}\\n\\n\\/* invoke OnUserActivate event *\\/\\n$modx->invokeEvent(\'OnUserActivate\',array(\\n    \'user\' => &$user,\\n));\\n\\n\\/* authenticate user to contexts *\\/\\nif ($modx->getOption(\'authenticate\',$scriptProperties,true)) {\\n    $modx->user =& $user;\\n    $modx->getUser();\\n    $contexts = !empty($scriptProperties[\'authenticateContexts\']) ? $scriptProperties[\'authenticateContexts\'] : $modx->context->get(\'key\');\\n    $contexts = explode(\',\',$contexts);\\n    foreach ($contexts as $ctx) {\\n        $modx->user->addSessionContext($ctx);\\n    }\\n}\\n\\n\\/* if wanting to redirect after confirmed registration (for shopping carts)\\n * Also allow &redirectBack parameter sent in confirmation email to redirect\\n * to a form requiring registration\\n *\\/\\n$redirectBack = $modx->getOption(\'redirectBack\',$_REQUEST,$modx->getOption(\'redirectBack\',$scriptProperties,\'\'));\\n$redirectBackParams = $redirectBackParams = $modx->getOption(\'redirectBackParams\',$_REQUEST,$modx->getOption(\'redirectBackParams\',$scriptProperties,\'\'));\\nif (!empty($redirectBackParams)) {\\n    $redirectBackParams = $Login->decodeParams($redirectBackParams);\\n}\\n$redirectTo = !empty($scriptProperties[\'redirectTo\']) ? $scriptProperties[\'redirectTo\'] : $redirectBack;\\nif (!empty($redirectTo)) {\\n    \\/* allow custom redirection params *\\/\\n    $redirectParams = !empty($scriptProperties[\'redirectParams\']) ? $scriptProperties[\'redirectParams\'] : $redirectBackParams;\\n    if (!empty($redirectParams) && !is_array($redirectParams)) $redirectParams = $modx->fromJSON($redirectParams);\\n    if (empty($redirectParams) || !is_array($redirectParams)) $redirectParams = array();\\n\\n    \\/* handle persist params from Register snippet *\\/\\n    $persistParams = $_GET;\\n    unset($persistParams[\'lp\'],$persistParams[\'lu\']);\\n    $persistParams[\'username\'] = $user->get(\'username\');\\n    $persistParams[\'userid\'] = $user->get(\'id\');    \\n    $redirectParams = array_merge($redirectParams,$persistParams);\\n    unset($redirectParams[$modx->getOption(\'request_param_alias\',null,\'q\')],$redirectParams[\'redirectBack\']);\\n\\n    \\/* redirect user *\\/\\n    $url = $modx->makeUrl($redirectTo,\'\',$redirectParams);\\n    $modx->sendRedirect($url);\\n}\\n\\nreturn \'\';","locked":0,"properties":"a:5:{s:10:\\"redirectTo\\";a:6:{s:4:\\"name\\";s:10:\\"redirectTo\\";s:4:\\"desc\\";s:36:\\"prop_confirmregister.redirectto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:14:\\"redirectParams\\";a:6:{s:4:\\"name\\";s:14:\\"redirectParams\\";s:4:\\"desc\\";s:40:\\"prop_confirmregister.redirectparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"authenticate\\";a:6:{s:4:\\"name\\";s:12:\\"authenticate\\";s:4:\\"desc\\";s:38:\\"prop_confirmregister.authenticate_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:20:\\"authenticateContexts\\";a:6:{s:4:\\"name\\";s:20:\\"authenticateContexts\\";s:4:\\"desc\\";s:46:\\"prop_confirmregister.authenticatecontexts_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"errorPage\\";a:6:{s:4:\\"name\\";s:9:\\"errorPage\\";s:4:\\"desc\\";s:35:\\"prop_confirmregister.errorpage_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => '07168473154b7fd215c133668c117bc5',
        'native_key' => 4,
        'signature' => 'eeff2f6210d81345601fde8490a0ca11',
      ),
      'e1e1392b9f2c262cee3980535cbe7e94' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":5,"name":"UpdateProfile","description":"Allows front-end updating of a users own profile.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * UpdateProfile\\n *\\n * Copyright 2010 by Shaun McCormick <shaun@modx.com>\\n *\\n * Register is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Register is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Register; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx UpdateProfile Snippet. Handles updating of User Profiles.\\n *\\n * @package login\\n *\\/\\nrequire_once $modx->getOption(\'login.core_path\',null,$modx->getOption(\'core_path\').\'components\\/login\\/\').\'model\\/login\\/login.class.php\';\\n$login = new Login($modx,$scriptProperties);\\n$modx->lexicon->load(\'login:updateprofile\');\\n$modx->lexicon->load(\'login:register\');\\n\\n\\/* setup default properties *\\/\\n$preHooks = $modx->getOption(\'preHooks\',$scriptProperties,\'\');\\n$submitVar = $modx->getOption(\'submitVar\',$scriptProperties,\'login-updprof-btn\');\\n$redirectToLogin = $modx->getOption(\'redirectToLogin\',$scriptProperties,true);\\n$reloadOnSuccess = $modx->getOption(\'reloadOnSuccess\',$scriptProperties,true);\\n$errTpl = $modx->getOption(\'errTpl\',$scriptProperties,\'<span class=\\"error\\">[[+error]]<\\/span>\');\\n$emailField = $modx->getOption(\'email\',$scriptProperties,\'email\');\\n$validate = $modx->getOption(\'validate\',$scriptProperties,\'\');\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'\');\\n\\n\\/* verify authenticated status *\\/\\nif (!$modx->user->hasSessionContext($modx->context->get(\'key\'))) {\\n    if ($redirectToLogin) {\\n        $modx->sendUnauthorizedPage();\\n    } else {\\n        return \'\';\\n    }\\n}\\n\\n\\/* get profile *\\/\\n$profile = $modx->user->getOne(\'Profile\');\\nif (empty($profile)) {\\n    $modx->log(modX::LOG_LEVEL_ERROR,\'Could not find profile for user: \'.$modx->user->get(\'username\'));\\n    return \'\';\\n}\\n\\n$placeholders = $profile->toArray();\\n\\/* add extended fields to placeholders *\\/\\nif ($modx->getOption(\'useExtended\',$scriptProperties,true)) {\\n    $extended = $profile->get(\'extended\');\\n    if (!empty($extended) && is_array($extended)) {\\n        $placeholders = array_merge($extended,$placeholders);\\n    }\\n}\\n$modx->toPlaceholders($placeholders,$placeholderPrefix);\\n\\n\\/* if success *\\/\\nif (!empty($_REQUEST[\'updpsuccess\'])) {\\n    $modx->setPlaceholder(\'login.update_success\',true);\\n}\\n\\nif (!empty($_POST) && (empty($submitVar) || !empty($_POST[$submitVar]))) {\\n    \\/* handle validation *\\/\\n    $login->loadValidator();\\n    $fields = $login->validator->validateFields($_POST,$validate);\\n    foreach ($fields as $k => $v) {\\n        $fields[$k] = str_replace(array(\'[\',\']\'),array(\'&#91;\',\'&#93;\'),$v);\\n    }\\n    if (!empty($submitVar)) unset($fields[$submitVar]);\\n    \\n    \\/* if allow_multiple_emails setting is false, prevent duplicate emails *\\/\\n    if (!empty($fields[$emailField]) && !$modx->getOption(\'allow_multiple_emails\',null,false)) {\\n        $emailTaken = $modx->getObject(\'modUserProfile\',array(\\n            \'email\' => $fields[$emailField],\\n            \'id:!=\' => $modx->user->get(\'id\'),\\n        ));\\n        if ($emailTaken) {\\n            $login->validator->errors[$emailField] = $modx->lexicon(\'login.email_taken\',array(\'email\' => $fields[$emailField]));\\n        }\\n    }\\n\\n    if (empty($login->validator->errors)) {\\n        \\/* do prehooks *\\/\\n        $login->loadHooks(\'preHooks\');\\n        $login->preHooks->loadMultiple($preHooks,$fields,array(\\n            \'submitVar\' => $submitVar,\\n            \'redirectToLogin\' => $redirectToLogin,\\n            \'reloadOnSuccess\' => $reloadOnSuccess,\\n        ));\\n        if (!empty($login->preHooks->fields)) {\\n            $fields = $login->preHooks->fields;\\n        }\\n        if (!empty($submitVar)) unset($fields[$submitVar]);\\n        \\n        \\/* process hooks *\\/\\n        if (!empty($login->preHooks->errors)) {\\n            $errors = array();\\n            foreach ($login->preHooks->errors as $key => $error) {\\n                $errors[$key] = str_replace(\'[[+error]]\',$error,$errTpl);\\n            }\\n            $modx->toPlaceholders($errors,\'error\');\\n\\n            $errorMsg = $login->preHooks->getErrorMessage();\\n            $modx->toPlaceholder(\'message\',$errorMsg,\'error\');\\n\\n        } else {\\n            \\/* update the profile *\\/\\n            $result = require_once $login->config[\'processorsPath\'].\'update.profile.php\';\\n            if ($result !== true) {\\n                $modx->toPlaceholder(\'message\',$result,\'error\');\\n            } else if ($reloadOnSuccess) {\\n                $url = $modx->makeUrl($modx->resource->get(\'id\'),\'\',\'?updpsuccess=1\',\'full\');\\n                $modx->sendRedirect($url);\\n            } else {\\n                $modx->setPlaceholder(\'login.update_success\',true);\\n            }\\n        }\\n    }\\n    $modx->toPlaceholders($login->validator->errors,$placeholderPrefix.\'error\');\\n    $modx->toPlaceholders($fields,$placeholderPrefix);\\n}\\n\\nreturn \'\';","locked":0,"properties":"a:12:{s:9:\\"submitVar\\";a:6:{s:4:\\"name\\";s:9:\\"submitVar\\";s:4:\\"desc\\";s:33:\\"prop_updateprofile.submitvar_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"redirectToLogin\\";a:6:{s:4:\\"name\\";s:15:\\"redirectToLogin\\";s:4:\\"desc\\";s:39:\\"prop_updateprofile.redirecttologin_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"reloadOnSuccess\\";a:6:{s:4:\\"name\\";s:15:\\"reloadOnSuccess\\";s:4:\\"desc\\";s:39:\\"prop_updateprofile.reloadonsuccess_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:12:\\"syncUsername\\";a:6:{s:4:\\"name\\";s:12:\\"syncUsername\\";s:4:\\"desc\\";s:36:\\"prop_updateprofile.syncusername_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"emailField\\";a:6:{s:4:\\"name\\";s:10:\\"emailField\\";s:4:\\"desc\\";s:34:\\"prop_updateprofile.emailfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"email\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:11:\\"useExtended\\";a:6:{s:4:\\"name\\";s:11:\\"useExtended\\";s:4:\\"desc\\";s:35:\\"prop_updateprofile.useextended_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"excludeExtended\\";a:6:{s:4:\\"name\\";s:15:\\"excludeExtended\\";s:4:\\"desc\\";s:39:\\"prop_updateprofile.excludeextended_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:13:\\"allowedFields\\";a:6:{s:4:\\"name\\";s:13:\\"allowedFields\\";s:4:\\"desc\\";s:37:\\"prop_updateprofile.allowedfields_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:21:\\"allowedExtendedFields\\";a:6:{s:4:\\"name\\";s:21:\\"allowedExtendedFields\\";s:4:\\"desc\\";s:45:\\"prop_updateprofile.allowedextendedfields_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"preHooks\\";a:6:{s:4:\\"name\\";s:8:\\"preHooks\\";s:4:\\"desc\\";s:32:\\"prop_updateprofile.prehooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"postHooks\\";a:6:{s:4:\\"name\\";s:9:\\"postHooks\\";s:4:\\"desc\\";s:33:\\"prop_updateprofile.posthooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:17:\\"placeholderPrefix\\";a:6:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:41:\\"prop_updateprofile.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => 'b708e23c50acfdefd26544842bd7f54e',
        'native_key' => 5,
        'signature' => 'afb82f3efd6f6ae6e48d391913e88c1e',
      ),
      'ee93642e035a133b6a057f158c4dce34' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":6,"name":"Profile","description":"Displays Profile data for a User.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Profile\\n *\\n * Copyright 2010 by Shaun McCormick <shaun@modx.com>\\n *\\n * Register is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Register is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Register; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx Profile Snippet. Sets Profile data for a user to placeholders\\n *\\n * @package login\\n *\\/\\nrequire_once $modx->getOption(\'login.core_path\',null,$modx->getOption(\'core_path\').\'components\\/login\\/\').\'model\\/login\\/login.class.php\';\\n$login = new Login($modx,$scriptProperties);\\n$modx->lexicon->load(\'login:profile\');\\n\\n\\/* setup default properties *\\/\\n$prefix = $modx->getOption(\'prefix\',$scriptProperties,\'\');\\n$user = $modx->getOption(\'user\',$scriptProperties,\'\');\\n\\n\\/* verify authenticated status if no user specified *\\/\\nif (empty($user) && !$modx->user->hasSessionContext($modx->context->get(\'key\'))) {\\n    return \'\';\\n\\/* specifying a specific user, so try and get it *\\/\\n} else if (!empty($user)) {\\n    $username = $user;\\n    $userNum = (int)$user;\\n    $c = array();\\n    if (!empty($userNum)) {\\n        $c[\'id\'] = $userNum;\\n    } else {\\n        $c[\'username\'] = $username;\\n    }\\n    $user = $modx->getObject(\'modUser\',$c);\\n    if (!$user) {\\n        $modx->log(modX::LOG_LEVEL_ERROR,\'Could not find user: \'.$username);\\n        return \'\';\\n    }\\n\\/* just use current user *\\/\\n} else {\\n    $user =& $modx->user;\\n}\\n\\n\\n\\/* get profile *\\/\\n$profile = $user->getOne(\'Profile\');\\nif (empty($profile)) {\\n    $modx->log(modX::LOG_LEVEL_ERROR,\'Could not find profile for user: \'.$modx->user->get(\'username\'));\\n    return \'\';\\n}\\n\\n$placeholders = array_merge($profile->toArray(),$user->toArray());\\n\\/* add extended fields to placeholders *\\/\\nif ($modx->getOption(\'useExtended\',$scriptProperties,true)) {\\n    $extended = $profile->get(\'extended\');\\n    if (!empty($extended) && is_array($extended)) {\\n        $placeholders = array_merge($extended,$placeholders);\\n    }\\n}\\nunset($placeholders[\'password\'],$placeholders[\'cachepwd\']);\\n\\/* now set placeholders *\\/\\n$modx->toPlaceholders($placeholders,$prefix,\'\');\\nreturn \'\';","locked":0,"properties":"a:3:{s:6:\\"prefix\\";a:6:{s:4:\\"name\\";s:6:\\"prefix\\";s:4:\\"desc\\";s:24:\\"prop_profile.prefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:4:\\"user\\";a:6:{s:4:\\"name\\";s:4:\\"user\\";s:4:\\"desc\\";s:22:\\"prop_profile.user_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:11:\\"useExtended\\";a:6:{s:4:\\"name\\";s:11:\\"useExtended\\";s:4:\\"desc\\";s:29:\\"prop_profile.useextended_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => 'a50cca6abca6ebc1e63518af9f887757',
        'native_key' => 6,
        'signature' => 'f7a5f6d70c5a195e1b483f03dca2730c',
      ),
      '4df39d3a28f875646637df8c1319da64' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":7,"name":"ChangePassword","description":"Processes a form for changing the password for a User.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * ChangePassword snippet\\n *\\n * @package login\\n **\\/\\n$login = $modx->getService(\'login\',\'Login\',$modx->getOption(\'login.core_path\',null,$modx->getOption(\'core_path\').\'components\\/login\\/\').\'model\\/login\\/\',$scriptProperties);\\nif (!($login instanceof Login)) return \'\';\\n$modx->lexicon->load(\'login:register\');\\n$modx->lexicon->load(\'login:changepassword\');\\n\\n\\/* setup default properties *\\/\\n$submitVar = $modx->getOption(\'submitVar\',$scriptProperties,\'logcp-submit\');\\n$preHooks = $modx->getOption(\'preHooks\',$scriptProperties,\'\');\\n$validate = $modx->getOption(\'validate\',$scriptProperties,\'\');\\n$successMessage = $modx->getOption(\'successMessage\',$scriptProperties,\'\');\\n$reloadOnSuccess = $modx->getOption(\'reloadOnSuccess\',$scriptProperties,true);\\n$redirectToLogin = $modx->getOption(\'redirectToLogin\',$scriptProperties,true);\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'logcp.\');\\n\\n$fieldOldPassword = $modx->getOption(\'fieldOldPassword\',$scriptProperties,\'password_old\');\\n$fieldNewPassword = $modx->getOption(\'fieldNewPassword\',$scriptProperties,\'password_new\');\\n$fieldConfirmNewPassword = $modx->getOption(\'fieldConfirmNewPassword\',$scriptProperties,\'password_new_confirm\');\\n$validateOldPassword = $modx->getOption(\'validateOldPassword\',$scriptProperties,true);\\n\\n\\/* verify authenticated status *\\/\\nif (!$modx->user->hasSessionContext($modx->context->get(\'key\'))) {\\n    if ($redirectToLogin) { $modx->sendUnauthorizedPage(); } else { return \'\';}\\n}\\n\\n\\/* get profile *\\/\\n$profile = $modx->user->getOne(\'Profile\');\\nif (empty($profile)) {\\n    $modx->log(modX::LOG_LEVEL_ERROR,\'Could not find profile for user: \'.$modx->user->get(\'username\'));\\n    return \'\';\\n}\\n\\n$placeholders = array_merge($profile->toArray(),array(\\n    \'username\' => $modx->user->get(\'username\'),\\n    \'id\' => $modx->user->get(\'id\'),\\n));\\n$modx->setPlaceholders($placeholders,$placeholderPrefix);\\n\\n$error = false;\\nif (!empty($_POST) && isset($_POST[$submitVar])) {\\n    \\/* handle validation *\\/\\n    $login->loadValidator();\\n    $fields = $login->validator->validateFields($_POST,$validate);\\n    foreach ($fields as $k => $v) {\\n        $fields[$k] = str_replace(array(\'[\',\']\'),array(\'&#91;\',\'&#93;\'),$v);\\n    }\\n    if (!empty($submitVar)) unset($fields[$submitVar]);\\n    $errors = $login->validator->errors;\\n\\n    if (empty($errors)) {\\n        \\/* do prehooks *\\/\\n        $login->loadHooks(\'preHooks\');\\n        $login->preHooks->loadMultiple($preHooks,$fields,array(\\n            \'user\' => &$modx->user,\\n            \'submitVar\' => $submitVar,\\n            \'reloadOnSuccess\' => $reloadOnSuccess,\\n            \'fieldOldPassword\' => $fieldOldPassword,\\n            \'fieldNewPassword\' => $fieldNewPassword,\\n            \'fieldConfirmNewPassword\' => $fieldConfirmNewPassword,\\n        ));\\n        if (!empty($login->preHooks->fields)) {\\n            $fields = $login->preHooks->fields;\\n        }\\n\\n        \\/* process preHooks *\\/\\n        if (!empty($login->preHooks->errors)) {\\n            $errors = $login->preHooks->errors;\\n            $modx->setPlaceholders($errors,$placeholderPrefix.\'error.\');\\n\\n            $errorMsg = $login->preHooks->getErrorMessage();\\n            $modx->setPlaceholder($placeholderPrefix.\'error_message\',$errorMsg);\\n\\n        } else {\\n            \\/* if changing the password *\\/\\n            if ($validateOldPassword) {\\n                $version = $modx->getVersionData();\\n                if (version_compare($version[\'full_version\'],\'2.1.0\',\'>=\')) {\\n                    if (empty($fields[$fieldOldPassword]) || !$modx->user->passwordMatches($fields[$fieldOldPassword])) {\\n                        $errors[$fieldOldPassword] = $modx->lexicon(\'login.password_invalid_old\');\\n                    }\\n                } else {\\n                    if (empty($fields[$fieldOldPassword]) || md5($fields[$fieldOldPassword]) != $modx->user->get(\'password\')) {\\n                        $errors[$fieldOldPassword] = $modx->lexicon(\'login.password_invalid_old\');\\n                    }\\n                }\\n            }\\n            $minLength = $modx->getOption(\'password_min_length\',null,8);\\n            if (empty($fields[$fieldNewPassword]) || strlen($fields[$fieldNewPassword]) < $minLength) {\\n                $errors[$fieldNewPassword] = $modx->lexicon(\'login.password_too_short\',array(\'length\' => $minLength));\\n            }\\n\\n            \\/* if using confirm, ensure they match *\\/\\n            if (!empty($fieldConfirmNewPassword)) {\\n                if (empty($fields[$fieldConfirmNewPassword]) || $fields[$fieldNewPassword] != $fields[$fieldConfirmNewPassword]) {\\n                    $errors[$fieldConfirmNewPassword] = $modx->lexicon(\'login.password_no_match\');\\n                }\\n            }\\n\\n            if (empty($errors)) {\\n                \\/* attempt to change the password *\\/\\n                $success = $modx->user->changePassword($fields[$fieldNewPassword],$fields[$fieldOldPassword]);\\n                if (!$success) {\\n                    \\/* for some reason it failed (possibly a plugin) so send error message *\\/\\n                    $modx->setPlaceholder($placeholderPrefix.$fieldNewPassword,$modx->lexicon(\'login.password_err_change\'));\\n\\n                } else {\\n                    \\/* do post-update hooks *\\/\\n                    $postHooks = $modx->getOption(\'postHooks\',$scriptProperties,\'\');\\n                    $login->loadHooks(\'postHooks\');\\n                    $fields[\'changepassword.user\'] = &$modx->user;\\n                    $fields[\'changepassword.profile\'] =& $profile;\\n                    $fields[\'changepassword.fieldOldPassword\'] = $fieldOldPassword;\\n                    $fields[\'changepassword.fieldNewPassword\'] = $fieldNewPassword;\\n                    $fields[\'changepassword.fieldConfirmNewPassword\'] = $fieldConfirmNewPassword;\\n                    $login->postHooks->loadMultiple($postHooks,$fields);\\n\\n                    \\/* process post hooks errors *\\/\\n                    if (!empty($login->postHooks->errors)) {\\n                        $modx->setPlaceholders($login->postHooks->errors,$placeholderPrefix.\'error.\');\\n\\n                        $errorMsg = $login->postHooks->getErrorMessage();\\n                        $modx->setPlaceholder($placeholderPrefix.\'error_message\',$errorMsg);\\n                    }\\n\\n                    if ($reloadOnSuccess) {\\n                        \\/* if reloading the page after success *\\/\\n                        $reloadOnSuccessVar = $modx->getOption(\'reloadOnSuccessVar\',$scriptProperties,\'logcp-success\');\\n                        $url = $modx->makeUrl($modx->resource->get(\'id\'),\'\',array($reloadOnSuccessVar => 1),\'full\');\\n                        $modx->sendRedirect($url);\\n\\n                    } else {\\n                        \\/* otherwise just spit out a success message\\/placeholder *\\/\\n                        $modx->setPlaceholder($placeholderPrefix.\'passwordChanged\',true);\\n                        if (!empty($successMessage)) {\\n                            $modx->setPlaceholder($placeholderPrefix.\'successMessage\',$successMessage);\\n                        }\\n                        return \'\';\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    $modx->setPlaceholders($errors,$placeholderPrefix.\'error.\');\\n    $modx->setPlaceholders($fields,$placeholderPrefix);\\n}\\n\\nreturn \'\';","locked":0,"properties":"a:10:{s:9:\\"submitVar\\";a:6:{s:4:\\"name\\";s:9:\\"submitVar\\";s:4:\\"desc\\";s:34:\\"prop_changepassword.submitvar_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"logcp-submit\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:16:\\"fieldOldPassword\\";a:6:{s:4:\\"name\\";s:16:\\"fieldOldPassword\\";s:4:\\"desc\\";s:41:\\"prop_changepassword.fieldoldpassword_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"password_old\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:16:\\"fieldNewPassword\\";a:6:{s:4:\\"name\\";s:16:\\"fieldNewPassword\\";s:4:\\"desc\\";s:41:\\"prop_changepassword.fieldnewpassword_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"password_new\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:23:\\"fieldConfirmNewPassword\\";a:6:{s:4:\\"name\\";s:23:\\"fieldConfirmNewPassword\\";s:4:\\"desc\\";s:48:\\"prop_changepassword.fieldconfirmnewpassword_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:20:\\"password_new_confirm\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:8:\\"preHooks\\";a:6:{s:4:\\"name\\";s:8:\\"preHooks\\";s:4:\\"desc\\";s:33:\\"prop_changepassword.prehooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:9:\\"postHooks\\";a:6:{s:4:\\"name\\";s:9:\\"postHooks\\";s:4:\\"desc\\";s:34:\\"prop_changepassword.posthooks_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"redirectToLogin\\";a:6:{s:4:\\"name\\";s:15:\\"redirectToLogin\\";s:4:\\"desc\\";s:40:\\"prop_changepassword.redirecttologin_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:15:\\"reloadOnSuccess\\";a:6:{s:4:\\"name\\";s:15:\\"reloadOnSuccess\\";s:4:\\"desc\\";s:40:\\"prop_changepassword.reloadonsuccess_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:14:\\"successMessage\\";a:6:{s:4:\\"name\\";s:14:\\"successMessage\\";s:4:\\"desc\\";s:39:\\"prop_changepassword.successmessage_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:17:\\"placeholderPrefix\\";a:6:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:42:\\"prop_changepassword.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:6:\\"logcp.\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => 'd0e1d83fed441ed94e559c8a31e7b22f',
        'native_key' => 7,
        'signature' => 'fc347d31a09c5158fed66ae5065af37a',
      ),
      '8f50c4742c06efb483c53b69e8809580' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":8,"name":"isLoggedIn","description":"Checks to see if the user is logged in. If not, redirects to Unauthorized Page.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * isLoggedIn\\n *\\n * Copyright 2009-2011 by Shaun McCormick <shaun@modx.com>\\n *\\n * isLoggedIn is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * isLoggedIn is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * isLoggedIn; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package login\\n *\\/\\n\\/**\\n * MODx isLoggedIn Snippet. Will check to see if user is logged into the current\\n * or specific context. If not, redirects to unauthorized page.\\n *\\n * @package login\\n *\\/\\n\\/* setup default properties *\\/\\n$ctxs = !empty($ctxs) ? $ctxs : $modx->context->get(\'key\');\\nif (!is_array($ctxs)) $ctxs = explode(\',\',$ctxs);\\n\\nif (!$modx->user->hasSessionContext($ctxs)) {\\n    if (!empty($redirectTo)) {\\n        $redirectParams = !empty($redirectParams) ? $modx->fromJSON($redirectParams) : \'\';\\n        $url = $modx->makeUrl($redirectTo,\'\',$redirectParams,\'full\');\\n        $modx->sendRedirect($url);\\n    } else {\\n        $modx->sendUnauthorizedPage();\\n    }\\n}\\nreturn \'\';","locked":0,"properties":"a:3:{s:8:\\"contexts\\";a:6:{s:4:\\"name\\";s:8:\\"contexts\\";s:4:\\"desc\\";s:29:\\"prop_isloggedin.contexts_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:10:\\"redirectto\\";a:6:{s:4:\\"name\\";s:10:\\"redirectto\\";s:4:\\"desc\\";s:31:\\"prop_isloggedin.redirectto_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}s:14:\\"redirectparams\\";a:6:{s:4:\\"name\\";s:14:\\"redirectparams\\";s:4:\\"desc\\";s:35:\\"prop_isloggedin.redirectparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:16:\\"login:properties\\";}}","moduleguid":""}',
        'guid' => '4b786b1f4ab1a12b0143e6ee3c0d2e0d',
        'native_key' => 8,
        'signature' => 'd12878bbd7e6feee6f1644aed46c1de6',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'login',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"login-1.6.5-pl\\/modCategory\\/8e8fe7868715cd048c3298ae604d558a\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"login"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'c610c9ea5e71690e7e02f9aba8eb1df7',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '8e8fe7868715cd048c3298ae604d558a',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"Login"}',
);